import Head from 'next/head';

import axios from 'axios';
import Color from 'color';
import dayjs from 'dayjs';
import timezone from 'dayjs/plugin/timezone.js';
import utc from 'dayjs/plugin/utc.js';
import customParseFormat from 'dayjs/plugin/customParseFormat.js';
import path from 'path';
import sharp from 'sharp';

import styles from '@/styles/Home.module.css';

import manifest from '../../package.json' with { type: 'json' };
import getForecast, {
  getMockForecast,
  getSpecialDatesForecast,
  getStormForecast,
} from '@/utilities/getForecast';
import { getTemperatureFriendly } from '@/utilities/getRoomTemperatureComfortFromCelsius.mjs';
import getSpecialDates from '@/utilities/getSpecialDates.mjs';

import WeatherContainer from '@/templates/WeatherContainer.mjs';
import type { items } from '@/utilities/transformMetOfficeJSON';

import log from '@/utilities/log.mjs';

axios.defaults.timeout = 20000;

dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.tz.setDefault('Europe/London');
dayjs.extend(customParseFormat);

type Meta = {
  siteTitle: string;
  siteDescription: string;
  siteUrl: string | undefined;
  monetization: string;
  author: {
    name: string;
    url: string;
  };
  version: string;
  timeStamp: string;
  todaysWeather: string;
  location: string;
  ogImage: string;
};

interface Props {
  items: items;
  meta: Meta;
}

export default function Home(props: Props) {
  const { items, meta } = props;
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <WeatherContainer pageContext={{ items, meta }} />
      </main>
    </>
  );
}

export async function getStaticProps() {
  const now = dayjs();
  const nowTimeStamp = now.toISOString();

  let items;
  const specialDates = await getSpecialDates();

  const CLOUDY_IMAGE_SRC =
    'https://www.metoffice.gov.uk/webfiles/latest/images/icons/weather/12.svg';
  const PROBABLY_RAINING = 'Probably Raining';

  const { title, description, author, version } = manifest;

  const meta: Meta = {
    siteTitle: title,
    siteDescription: description,
    siteUrl: process.env.GATSBY_SITE_URL,
    monetization: `$ilp.gatehub.net/484331722`,
    author,
    version,
    timeStamp: nowTimeStamp,
    todaysWeather: 'probably raining',
    location: 'South London',
    ogImage: `og-image-${dayjs().tz().format('YYYY-MM-DD-HH:mm:ss')}.png`,
  };

  function getIsTooHotForRoomTemperatureFromCelsius(celsius: number) {
    // the maximum should be below 24 °C (75 °F) – and to avoid sick building syndrome, below 22 °C (72 °F).[3]
    // From https://en.wikipedia.org/wiki/Room_temperature Accessed 2019-12-28
    if (celsius > 24) {
      return true;
    }
    return false;
  }

  function getIsTooColdForRoomTemperatureFromCelsius(celsius: number) {
    // The World Health Organization's standard ...
    // For those with respiratory problems or allergies, they recommend no less than 16 °C */
    // From https://en.wikipedia.org/wiki/Room_temperature Accessed 2019-12-28
    if (celsius < 16) {
      return true;
    }
    return false;
  }

  function getIsFrostyFromCelsius(celsius: number) {
    // Frost is likely below 4 degrees celsius
    // https://www.metoffice.gov.uk/weather/learn-about/weather/types-of-weather/frost-and-ice/forecasting-frost
    if (celsius <= 4) {
      return true;
    }
  }

  function getTemperatureColor(celsius: number) {
    if (!isFinite(celsius)) return null;
    if (getIsTooHotForRoomTemperatureFromCelsius(celsius)) {
      return '#cc0605';
    }
    if (getIsFrostyFromCelsius(celsius)) {
      return '#004a93';
    }
    if (getIsTooColdForRoomTemperatureFromCelsius(celsius)) {
      return '#0075c4';
    }
    return '#f1d220';
  }

  try {
    items = await getForecast(specialDates);
    // log('getForecast items: ', items);

    meta.timeStamp = `${dayjs(new Date()).tz().format('YYYY-MM-DD HHmm')}`;

    if (!items || items.length < 1) {
      throw new Error(`No items in retrieved weather forecast`);
    }

    const today = items[0];
    const backgroundColor =
      Color(getTemperatureColor(today.averageTemperature))
        .lighten(0.75)
        .hex() || '#FFFFFF';

    const input = (
      await axios({
        method: 'get',
        url: today.icon,
        responseType: 'arraybuffer',
        headers: { 'Accept-Encoding': 'gzip,deflate,compress' },
      })
    ).data;

    // await sharp(input, { density: 450 })
    //   .flatten({ background: backgroundColor })
    //   .resize(1200, 630, {
    //     fit: 'contain',
    //     background: backgroundColor,
    //   })
    //   .png()
    //   .toFile(`public/${meta.ogImage}`);

    // await sharp(input, { density: 450 })
    //   .flatten({ background: backgroundColor })
    //   .png()
    //   .resize(48)
    //   .toFile(`public/favicon.ico`);

    // await sharp(input, { density: 450 })
    //   .flatten({ background: backgroundColor })
    //   .resize(180)
    //   .toFile(`public/apple-touch-icon.png`);

    meta.todaysWeather = `It's ${getTemperatureFriendly(
      today.averageTemperature
    ).toLowerCase()} and ${today.description.toLowerCase()}`;
  } catch (error) {
    console.error('Error creating pages');
    console.error(error);

    const mock: items = [
      {
        friendlyDate: 'Today',
        time: today,
        description: PROBABLY_RAINING,
        icon: CLOUDY_IMAGE_SRC,
        temperature: null,
      },
      {
        friendlyDate: 'Sorry, problem getting forecast.',
        time: today,
        description: `${error}`,
        icon: CLOUDY_IMAGE_SRC,
        temperature: null,
      },
    ];

    items = mock;
  }

  return {
    props: {
      items,
      meta,
    },
  };
}
